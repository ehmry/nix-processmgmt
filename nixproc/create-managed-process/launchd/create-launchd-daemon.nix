{ writeTextFile
, stdenv
, createCredentials

# Specifies whether user changing functionality should be disabled or not
, forceDisableUserChange ? false
# Prefix that is in front of all launchd plist files generated by this function
, prefix ? "org.nixos."
}:

{
# A name that identifies the process instance
name
# Specifies which packages need to be in the PATH
, path ? []
# Specifies which groups and users that need to be created.
, credentials ? {}
# Arbitrary build commands executed after generating the configuration files
, postInstall ? ""
# The remaining parameters are directly translated to plist XML properties.
# Possible configuration options can be found here: https://www.launchd.info
, ...
}@args:

let
  environment = stdenv.lib.optionalAttrs (path != []) {
    PATH = builtins.concatStringsSep ":" (map (package: "${package}/bin") path); # Augment path environment variable, if applicable
  } // stdenv.lib.mapAttrs (name: value: toString value) args.EnvironmentVariables or {}; # Convert all environment variables to strings

  label = if args ? Label then args.Label else "${prefix}${name}";

  properties = {
    Label = label;
  } // removeAttrs args ([ "name" "path" "credentials" "postInstall" ] ++ stdenv.lib.optional forceDisableUserChange "UserName") // stdenv.lib.optionalAttrs (environment != {}) {
    EnvironmentVariables = environment;
  };

  attrsToPList = attrs:
    "<dict>\n"
    + stdenv.lib.concatMapStrings (name:
      let
        value = builtins.getAttr name attrs;
      in
      ''
        <key>${name}</key>
        ${exprToPList value}
      ''
    ) (builtins.attrNames attrs)
    + "</dict>\n";

  listToPList = list:
    "<array>\n"
    + stdenv.lib.concatMapStrings (value: exprToPList value + "\n") list
    + "</array>\n";

  exprToPList = expr:
    let
      exprType = builtins.typeOf expr;
    in
    if exprType == "bool" then
      if expr then "<true/>" else "<false/>"
    else if exprType == "int" then "<integer>${toString expr}</integer>"
    else if exprType == "float" then "<real>${toString expr}</real>"
    else if exprType == "string" then "<string>${expr}</string>"
    else if exprType == "set" then
      if stdenv.lib.isDerivation expr
      then "<string>${expr}</string>"
      else attrsToPList expr
    else if exprType == "list" then listToPList expr
    else if exprType == "null" then ""
    else if exprType == "lambda" then throw "Cannot convert a lambda to a plist property"
    else "${expr}";

  launchdDaemonConfig = writeTextFile {
    name = "${label}.plist";
    text = ''
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">

      <plist version="1.0">
        ${exprToPList properties}
      </plist>
    '';
  };

  credentialsSpec = if credentials == {} || forceDisableUserChange then null else createCredentials credentials;
in
stdenv.mkDerivation {
  inherit name;
  buildCommand = ''
    mkdir -p $out/Library/LaunchDaemons
    ln -s ${launchdDaemonConfig} $out/Library/LaunchDaemons/${label}.plist

    ${stdenv.lib.optionalString (credentialsSpec != null) ''
      ln -s ${credentialsSpec}/dysnomia-support $out/dysnomia-support
    ''}

    ${postInstall}
  '';
}
